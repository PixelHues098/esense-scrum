@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime
<MudDialog>
    <DialogContent>
        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData=@(ChartData.ToArray())
            InputLabels=@(ChartLabel.ToArray())>
            <CustomGraphics>
                <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle"
                    fill="black" font-family="Helvetica" font-size="2">Total</text>
                <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle"
                    fill="black" font-family="Helvetica" font-size="5">@(ChartData.ToArray().Sum().ToString())</text>
            </CustomGraphics>
        </MudChart>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ReportType { get; set; } = "";
    [Parameter] public string ProjectId { get; set; } = "";
    Project? ProjectData = new Project() { };
    List<double> ChartData = new();
    List<string> ChartLabel = new();

    async protected override Task OnInitializedAsync()
    {
        ProjectData = await GetProjectByUrl(Int16.Parse(ProjectId));
        GenerateUserContribution();
    }

    async void ReloadResource()
    {
        ProjectData = await GetProjectByUrl(Int16.Parse(ProjectId));
        await InvokeAsync(StateHasChanged);
    }

    async Task<Project> GetProjectByUrl(int ProjectId)
    {
        var getProjectQueryBody = new { ProjectID = ProjectId };
        var jwt = await ReadCookies();

        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Header", jwt.ToString());
        var response = await client.PostAsJsonAsync("http://localhost:8000/project/get-by-id", getProjectQueryBody);
        var project = await response.Content.ReadFromJsonAsync<Project>();
        return project;
    }

    async ValueTask<string> ReadCookies()
    {
        return await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "jwt");
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));


    public void GenerateUserContribution()
    {
        ChartData.Clear();
        ChartLabel.Clear();
        foreach (var member in ProjectData.Members)
        {
            int? contributionSum = 0;
            foreach (var issue in ProjectData.Issues)
            {
                if (issue.AssigneeId == member.ID)
                {
                    contributionSum += issue.Points;
                }
            }
            ChartData.Add(Convert.ToDouble(contributionSum));
            ChartLabel.Add(member.Username);
        }
    }
}
