@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime
<MudDialog>
    <DialogContent>
        <div class="d-flex flex-grow-1 gap-4 justify-center">
            <div class="d-flex flex-grow-1 gap-4 justify-center">
                <MudText Typo="Typo.h1">@DailyVelocity pts/day</MudText>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ReportType { get; set; } = "";
    [Parameter] public string ProjectId { get; set; } = "";
    Project? ProjectData = new Project() { };
    List<double> ChartData = new();
    List<string> ChartLabel = new();

    Double DailyVelocity { get; set; } = 0;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));

    async protected override Task OnInitializedAsync()
    {
        ProjectData = await GetProjectByUrl(Int16.Parse(ProjectId));
        GenerateDailyVelocity();
    }

    async void ReloadResource()
    {
        ProjectData = await GetProjectByUrl(Int16.Parse(ProjectId));
        await InvokeAsync(StateHasChanged);
    }

    async Task<Project> GetProjectByUrl(int ProjectId)
    {
        var getProjectQueryBody = new { ProjectID = ProjectId };
        var jwt = await ReadCookies();

        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Header", jwt.ToString());
        var response = await client.PostAsJsonAsync("http://localhost:8000/project/get-by-id", getProjectQueryBody);
        var project = await response.Content.ReadFromJsonAsync<Project>();
        return project;
    }

    async ValueTask<string> ReadCookies()
    {
        return await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "jwt");
    }

    void GenerateDailyVelocity()
    {
        int? totalPointsDone = 0;
        int totalSprintDays = 0;
        Swimlane DoneSwimlane = new();

        foreach (var swimlane in ProjectData.GetOrderedSwimlaneList())
        {
            if (swimlane.Name == "Done")
            {
                DoneSwimlane = swimlane;
            }
        }

        foreach (var issue in ProjectData.Issues)
        {
            if (issue.SwimlaneId == DoneSwimlane.ID)
            {
                totalPointsDone += issue.Points;
            }
        }

        foreach (var sprint in ProjectData.GetSprintList(true))
        {
            totalSprintDays += sprint.GetSprintDays();
        }

        DailyVelocity = Math.Round((double)totalPointsDone / (double)totalSprintDays, 2);
    }
}
