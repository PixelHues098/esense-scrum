<div style=@("width: " + (DaysInFourYears * PixelsPerDay).ToString() + "px; " + "height: 50px;")
    class="d-flex flex-row flex-grow-1 mud-list-subheader">
    @foreach (var dayPerMonth in dayPerMonthList)
    {
        <div style=@("width: " + (dayPerMonth.Value * PixelsPerDay).ToString() + "px; " + "height: 50px;")
        class="d-flex justify-center">
            @dayPerMonth.Key
        </div>
    }
</div>

@code {
    [Parameter] public int PixelsPerDay { get; set; } = 0;
    [Parameter] public int DaysInFourYears { get; set; } = 0;
    [Parameter] public DateTime EarliestEpic { get; set; }
    List<KeyValuePair<string, int>> dayPerMonthList = new List<KeyValuePair<string, int>>();
    private int monthCount = 0;
    private DateTime dateEndRange = DateTime.Now.AddYears(2);

    protected override async Task OnParametersSetAsync()
    {
        monthCount = (dateEndRange - EarliestEpic).Days / 30;
        dayPerMonthList.Clear();
        for (int i = 0; i < monthCount; i++)
        {
            DateTime iDateTime = EarliestEpic.AddMonths(i);
            string monthYearId = (iDateTime.ToString("MMM").ToUpper()) + " " + (iDateTime.ToString("yyyy"));
            double monthYearDayCnt = (iDateTime - iDateTime.AddMonths(-1)).TotalDays;
            dayPerMonthList.Add(new KeyValuePair<string, int>(monthYearId, (int)monthYearDayCnt));
        }
    }
}