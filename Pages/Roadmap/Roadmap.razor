@page "/project/{ProjectId}/roadmap"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime
<PageTitle>Roadmap</PageTitle>

<FilterTools ProjectId=@ProjectId ReloadResource=@ReloadResource SortEpicList=@SortEpicList />
<div Class="my-6 flex-grow-1">
    <MudGrid Spacing="1" Class="border-solid border rounded-lg pa-3" style="border-color: #e0e0e0ff;">
        <MudItem xs="1">
            <div class="d-flex flex-column flex-grow-1 gap-1">
                <div class="d-flex justify-center flex-grow-1 overflow-hidden mud-list-subheader" style="height: 50px;">
                    EPICS
                </div>
                @foreach (var epic in EpicList)
                {
                    <div class="d-flex justify-end flex-grow-1 overflow-hidden mr-2" style="height: 50px;">
                        <MudChip Label="true" Class=@("d-flex flex-grow-1 white-text align-self-center " +
                        epic.GetEpicColor())>
                            @epic.Name
                        </MudChip>
                    </div>
                }
            </div>
        </MudItem>
        <MudItem xs="11">
            <div class="d-flex flex-column flex-grow-1 gap-1 overflow-scroll pb-6">
                <RoadmapHeader PixelsPerDay=@pixelsPerDay DaysInFourYears=@DaysInFourYears EarliestEpic=@earliestEpic />
                @foreach (var epic in EpicList)
                {
                    <EpicTimePlot DaysInFourYears=@DaysInFourYears PixelsPerDay=@pixelsPerDay Context=@epic
                    EarliestEpic=@earliestEpic />
                }
            </div>
        </MudItem>
    </MudGrid>
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }
    [CascadingParameter]
    public MainLayout? Ancestor { get; set; }
    Project? ProjectData = new Project() { };
    List<Epic> EpicList = new();
    const int DaysInFourYears = (365 * 4) + 1;
    const int pixelsPerDay = 20;
    int monthCount = 0;
    public DateTime earliestEpic { get; set; } = DateTime.Now;

    async protected override Task OnInitializedAsync()
    {
        UpdateParentComponentProjectId();
        ReloadResource();
    }

    async ValueTask<string> ReadCookies()
    {
        return await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "jwt");
    }

    async Task<Project> GetProjectByUrl(int ProjectId)
    {
        var getProjectQueryBody = new { ProjectID = ProjectId };
        var jwt = await ReadCookies();

        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Header", jwt.ToString());
        var response = await client.PostAsJsonAsync("http://localhost:8000/project/get-by-id", getProjectQueryBody);
        var project = await response.Content.ReadFromJsonAsync<Project>();
        return project;
    }

    async void ReloadResource()
    {
        ProjectData = await GetProjectByUrl(Int16.Parse(ProjectId));
        earliestEpic = ProjectData.GetEarliestEpic();
        SortEpicList("name-desc");
        await InvokeAsync(StateHasChanged);
    }

    void UpdateParentComponentProjectId()
    {
        Ancestor.ProjectId = ProjectId;
        Ancestor?.NotifyChange();
    }

    void SortEpicList(string sortType)
    {
        switch (sortType)
        {
            case "date-desc":
                EpicList = ProjectData.GetEpicList();
                break;
            case "name-desc":
                EpicList = ProjectData.GetNameSortedEpicList();
                break;
            default:
                EpicList = ProjectData.GetEpicList();
                break;
        }
    }
}